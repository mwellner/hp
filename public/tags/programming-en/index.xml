<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming En on mathias wellner</title>
    <link>http://www.mwellner.de/tags/programming-en/index.xml</link>
    <description>Recent content in Programming En on mathias wellner</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>de-de</language>
    <atom:link href="http://www.mwellner.de/tags/programming-en/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>First Steps with Scheme and Git</title>
      <link>http://www.mwellner.de/post/2014-03-01-first-steps-with-scheme-and-git-2/</link>
      <pubDate>Sat, 01 Mar 2014 11:17:47 +0000</pubDate>
      
      <guid>http://www.mwellner.de/post/2014-03-01-first-steps-with-scheme-and-git-2/</guid>
      <description>&lt;p&gt;Today, I installed &lt;a href=&#34;http://en.wikipedia.org/wiki/Git_%28software%29&#34;&gt;Git&lt;/a&gt;, joined &lt;a href=&#34;http://github.com&#34;&gt;github.com&lt;/a&gt; and published my first two code snippets in &lt;a href=&#34;http://en.wikipedia.org/wiki/Scheme_%28programming_language%29&#34;&gt;Scheme&lt;/a&gt; (&lt;a href=&#34;http://en.wikipedia.org/wiki/Lisp_programming_language&#34;&gt;Lisp&lt;/a&gt; dialect).&lt;/p&gt;

&lt;p&gt;The main reason to study Scheme is the book &lt;a href=&#34;http://mitpress.mit.edu/sicp/&#34;&gt;Structure and Interpretation of Computer Programs&lt;/a&gt;, a computer science classic. And the authors use Scheme to illustrate the concepts throughout the book. The language has a very strange syntax. To illustrate this, I present proudly my first programming exercise, an implementation of &lt;a href=&#34;http://en.wikipedia.org/wiki/Newton%27s_method&#34;&gt;Newton&amp;#8217;s method&lt;/a&gt; to iteratively determine the cube root of a number (also available with syntax highlighting &lt;a href=&#34;https://github.com/mwellner/lisp/blob/master/cbrt.scm&#34;&gt;on github&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;You want to determine the cube root of &lt;em&gt;x&lt;/em&gt;, the variable &lt;em&gt;guess&lt;/em&gt; will be modified until it&amp;#8217;s third power is pretty close to &lt;em&gt;x&lt;/em&gt;.&lt;/p&gt;

&lt;pre name=&#34;code&#34; class=&#34;c#&#34;&gt;; Newton method to determine cubic root

(define (cbrt-iter guess x)
  (if (good-enough? guess x)
    guess
    (cbrt-iter (improve guess x) x)))

(define (improve guess x)
  (/ (+
       (/ x (square guess))
       (* 2 guess))
     3))

(define (good-enough? guess x)
  (&amp;lt; (abs (- (* guess (square guess)) x))
    0.00001))

(define (cbrt x)
  (cbrt-iter 1.0 x))
&lt;/pre&gt;

&lt;p&gt;Basically, brackets are everything. The expression (+&amp;nbsp;1&amp;nbsp;1) adds 1 and 1. With &lt;em&gt;define&lt;/em&gt;, you can declare a variable or function. It takes some time to get used to. But twisting my brain is a good exercise and hopefully will help me to understand also some higher-level concepts.&lt;/p&gt;

&lt;p&gt;The second part of this evening session was installing Git and setting it up to work with my github account. With Ubuntu and some good tutorials, this was easy. It all came down to a few &lt;em&gt;apt-get install&lt;/em&gt; commands. My Linux machine is really a good working environment for these kind of tasks.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LabVIEW revisited</title>
      <link>http://www.mwellner.de/post/2011-05-19-labview-revisited/</link>
      <pubDate>Thu, 19 May 2011 22:01:07 +0000</pubDate>
      
      <guid>http://www.mwellner.de/post/2011-05-19-labview-revisited/</guid>
      <description>&lt;p&gt;In the early days of my time as PhD student, I had the forced pleasure to work with &lt;a href=&#34;http://de.wikipedia.org/wiki/LabVIEW&#34;&gt;LabVIEW&lt;/a&gt;. In contrast to text-based programming languages (the vast majority), LabVIEW uses a graphical approach, pleasing the aesthetic mind, but looking extremely crammed and confusing for larger projects.&lt;/p&gt;

&lt;p&gt;In my recent project, LabVIEW caught me again. Luckily we use it in combination with a scripting language, which implements the device logic, while LabVIEW is confined to the user interface. This makes it bearable, but very repetitive. And repetitive means mouse clicks and movements &amp;ndash; a lot of mouse clicks and movements.&lt;/p&gt;

&lt;p&gt;The event structure caused me also a lot of pain. Back in 2005 I really wanted it, a piece of code that is only executed when the user clicks a button or changes a setting. The alternative is polling, asking for the value of the user control again and again. Anyways, they introduced the event structure, but you can&amp;#8217;t place it just somewhere. It made my program block, it didn&amp;#8217;t work at all, was never executed &amp;ndash; all that kind of problems you run into as programmer. But I solved it and made it work.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>