<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on mathias wellner</title>
    <link>http://www.mwellner.de/tags/programming/index.xml</link>
    <description>Recent content in Programming on mathias wellner</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>de-de</language>
    <atom:link href="http://www.mwellner.de/tags/programming/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Implementing simple ajax show/hide effects with cakePHP</title>
      <link>http://www.mwellner.de/2010/04/implementing-simple-ajax-show/hide-effects-with-cakephp/</link>
      <pubDate>Thu, 15 Apr 2010 09:56:52 +0000</pubDate>
      
      <guid>http://www.mwellner.de/2010/04/implementing-simple-ajax-show/hide-effects-with-cakephp/</guid>
      <description>&lt;p&gt;There are quite some tutorials on ajax effects out there [1, 2], but most were too complex for my needs. I simply wanted an enhanced index page for projects, which shows some details for each project and more on demand with a sliding effect. So here is what my solution looks like.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Basics&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I used cakePHP 1.3 RC3. I assume that you have a running cakePHP application with an index view of your main objects of concern. You also need to download the &lt;a href=&#34;http://www.prototypejs.org/&#34;&gt;prototype&lt;/a&gt; and &lt;a href=&#34;http://script.aculo.us/&#34;&gt;scriptaculous&lt;/a&gt; scripts and put all js-files into your /app/webroot/js folder.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Activating ajax&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In your default layout, you have to include the links to the prototype and scriptaculous scripts in the head section of the template.&lt;/p&gt;

&lt;pre name=&#34;code&#34; class=&#34;php&#34;&gt;&amp;lt;!-- file app/views/layout/default.ctp --&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;!-- existing head settings --&amp;gt;
    &amp;lt;?php
    echo $javascript-&gt;link(&#39;prototype&#39;);
    echo $javascript-&gt;link(&#39;scriptaculous.js?load=effects&#39;);
    ?&amp;gt;
&amp;lt;/head&amp;gt;
&lt;/pre&gt;

&lt;p&gt;You also need to activate the AJAX and Javascript helpers in the controller where you want to use it. I prefered to update the app controller, which enables the helpers for all controllers. Your app controller (usually at app/app_controller.php, create if necessary) should include the ajax and javascript helpers like this:&lt;/p&gt;

&lt;pre name=&#34;code&#34; class=&#34;php&#34;&gt;&amp;lt;!-- file app/app_controller.php --&amp;gt;
&amp;lt;?php
class AppController extends Controller {
    var $helpers = array(&#39;Html&#39;, &#39;Form&#39;, &#39;Ajax&#39;, &#39;Javascript&#39;);
}
?&amp;gt;
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;In your view&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In your view you can now include id-marked divs and ajax links to control the visibility of these divs. Assuming that your model is named Project, you need to update your index view at /app/views/project/index.ctp. I use two table rows for that. The first row contains the project name, the ajax links for showing/hiding details, and the actions. The second row is invisible at first (display:none) and contains the div which is controlled by the ajax links. To my knowledge it is not possible to hide/show entire table rows, therefore the second row is rendered empty at first. But it looks quite nice with the default alternate background color for table rows.&lt;/p&gt;

&lt;p&gt;The real trick here was to leave the second argument for the ajax link empty, linking to the same page. All other examples had links to sub pages implemented there what seemed too complex for my wishes. Of course, this implementation means that the entire content is loaded every time. For huge amounts of data this could be a performance issue.&lt;/p&gt;

&lt;pre name=&#34;code&#34; class=&#34;php&#34;&gt;&amp;lt;!-- file app/views/project/index.ctp --&amp;gt;
&amp;lt;table cellpadding=&#34;0&#34; cellspacing=&#34;0&#34;&amp;gt;
&amp;lt;tr&amp;gt;
    &amp;lt;th&gt;&amp;lt;?php echo $paginator-&gt;sort(&#39;name&#39;);?&gt;&amp;lt;/th&amp;gt;
    &amp;lt;th class=&#34;actions&#34;&amp;gt;&amp;lt;?php __(&#39;Actions&#39;);?&gt;&amp;lt;/th&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;?php
$i = 0;
foreach ($projects as $project):
    $id = $project[&#39;Project&#39;][&#39;id&#39;];
    $i++;
?&amp;gt;
&amp;lt;tr&amp;gt;
    &amp;lt;td&amp;gt;
    &amp;lt;?php echo $project[&#39;Project&#39;][&#39;name&#39;];?&amp;gt;
        &amp;lt;?php 
        // define string for div id
        $div_string = &#39;project_fold_&#39;.$i;

    // create ajax link which shows project details
    echo $ajax-&gt;link(
        &#39;show details&#39;,
        &#39;&#39;, 
        array( 
        &#39;update&#39; =&gt; $div_string, 
        &#39;loading&#39; =&gt; &#39;Effect.Appear(\&#39;&#39;.$div_string.&#39;\&#39;)&#39;,
        )
    );

    // create ajax link which hides project details
    echo $ajax-&gt;link(
        &#39;hide details&#39;,
        &#39;&#39;, 
        array( 
        &#39;update&#39; =&gt; $div_string, 
        &#39;loading&#39; =&gt; &#39;Effect.Fade(\&#39;&#39;.$div_string.&#39;\&#39;)&#39;,
        )
    );
    ?&amp;gt;
    &amp;lt;/td&amp;gt;
    &amp;lt;td class=&#34;actions&#34;&amp;gt;
    &amp;lt;?php echo $html-&gt;link(__(&#39;View&#39;, true), array(&#39;action&#39;=&gt;&#39;view&#39;, $id));?&amp;gt;
    &amp;lt;?php echo $html-&gt;link(__(&#39;Edit&#39;, true), array(&#39;action&#39;=&gt;&#39;edit&#39;, $id));?&amp;gt;
    &amp;lt;?php echo $html-&gt;link(
            __(&#39;Delete&#39;, true), 
            array( &#39;action&#39;=&gt;&#39;delete&#39;, $id), 
            null, 
            sprintf(__(&#39;Are you sure you want to delete # %s?&#39;, true), $id));
        ?&amp;gt;
    &amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;

&amp;lt;tr&amp;gt;
    &amp;lt;td colspan=&#34;2&#34;&amp;gt;
    &amp;lt;!-- display div which can be shown/hidden by ajax links --&amp;gt;
    &amp;lt;?php echo $ajax-&gt;div($div_string, array(&#39;style&#39; =&gt; &#39;display:none&#39;)); ?&amp;gt;

    &amp;lt;!-- project details --&amp;gt;
    &amp;lt;h3&amp;gt;&amp;lt;?php echo __(&#39;Project details&#39;);?&amp;gt;&amp;lt;/h3&amp;gt;
    &amp;lt;dl&amp;gt;
        &amp;lt;dt&amp;gt;&amp;lt;?php echo __(&#39;Description&#39;);?&amp;gt;&amp;lt;/dt&amp;gt;
        &amp;lt;dd&amp;gt;&amp;lt;?php echo $project[&#39;Project&#39;][&#39;description&#39;];?&amp;gt;&amp;lt;/dd&amp;gt;
        &amp;lt;dt&amp;gt;&amp;lt;?php echo __(&#39;Budget&#39;);?&amp;gt;&amp;lt;/dt&amp;gt;
        &amp;lt;dd&amp;gt;&amp;lt;?php printf(&#34;%.2f&amp;thinsp;kCHF&#34;, $project[&#39;Project&#39;][&#39;budget&#39;]);?&amp;gt;&amp;lt;/dd&amp;gt;
    &amp;lt;/dl&amp;gt;

    &amp;lt;?php echo $ajax-&gt;divEnd($div_string); ?&amp;gt;
    &amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;?php endforeach; ?&amp;gt;
&amp;lt;/table&amp;gt;
&lt;/pre&gt;

&lt;p&gt;If you want to go one step further, you can try to show/hide the ajax links as well. At first, only &lt;em&gt;show details&lt;/em&gt; is visible. When details are visible, only &lt;em&gt;hide details&lt;/em&gt; can be seen.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;[1] &lt;a href=&#34;http://www.reversefolds.com/articles/show/ajax&#34;&gt;AJAX cakePHP&lt;/a&gt;, ReverseFolds&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using xPC COM API and Visual C#</title>
      <link>http://www.mwellner.de/2008/04/using-xpc-com-api-and-visual-c/</link>
      <pubDate>Sat, 05 Apr 2008 16:00:34 +0000</pubDate>
      
      <guid>http://www.mwellner.de/2008/04/using-xpc-com-api-and-visual-c/</guid>
      <description>&lt;p&gt;This entry is for those who want to control an xPC target computer with a program written in C#. I personally did not find any example how to do this, the documentation provides an example using Visual Basic, but I found a simpler way. I do only use the xPC COM API (which must be included as reference in the project) and not the model COM interface. I think this is easier because you don&amp;#8217;t have to reinsert the model reference if you recompile it.&lt;/p&gt;

&lt;p&gt;The example here is a very simple one. I just needed to connect to the target, load the application, and register one signal, which I need to access. Please note that you need to insert a gain element with value 1 to register a signal (Target.GetSignalIdx).&lt;/p&gt;

&lt;pre name=&#34;code&#34; class=&#34;c#&#34;&gt;using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using XPCAPICOMLib;

namespace ProjectNamespace
{
    class XPC_COM
    {
        private xPCProtocol Protocol;  // from XPCAPICOMLib
        private xPCTarget Target;      // from XPCAPICOMLib
        private int SignalID;   // signal ID for one signal

        public XPC_COM()  // constructor for XPC_COM object
        {
            // initialize protocol and target objects
            Protocol = new xPCProtocol();
            Target = new xPCTarget();
            // establish connection to target
            Protocol.Init();
            Protocol.TcpIpConnect(&#34;192.168.0.1&#34;, &#34;22222&#34;);
            // load application
            Target.Init(Protocol);
            Target.LoadApp(&#34;folder name&#34;, &#34;model name&#34;);
            // find signal id
            SignalID = Target.GetSignalIdx(&#34;signal name&#34;);
        }

        ~XPC_COM() // destructor for XPC_COM object
        {
            // close connection to xPC target
            Protocol.Close();
        }

        public int isAppRunning()
        {
            return Target.IsAppRunning();
        }

        public void startApp()
        {
            Target.StartApp();
        }

        public void stopApp()
        {
            Target.StopApp();
        }

        public double getLength()
        {
            return Target.GetSignal(SignalID);
        }

    }
}
&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Sound Feedback Using MIDI</title>
      <link>http://www.mwellner.de/2006/02/sound-feedback-using-midi/</link>
      <pubDate>Fri, 24 Feb 2006 21:26:40 +0000</pubDate>
      
      <guid>http://www.mwellner.de/2006/02/sound-feedback-using-midi/</guid>
      <description>&lt;p&gt;One of my subjects is developing a sound feedback system for patients undergoing gait rehabilitation in the Lokomat. The last weeks I spent trying to program something with C++, swaying between MFC and &amp;ldquo;normal&amp;rdquo; form applications. My search for existing examples was difficult, because many people just put something in the net to play an existing MIDI file. But my task was more like creating a life stream and playing it. The first version uses very basic MIDI functions and plays a repeating pattern. The goal parameter (difference between hip and knee angle) then is transferred into more or less consonant chords. But I still have to test this principle with some people.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>