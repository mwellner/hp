<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Xpc Com Api on mathias wellner</title>
    <link>http://www.mwellner.de/tags/xpc-com-api/index.xml</link>
    <description>Recent content in Xpc Com Api on mathias wellner</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>de-de</language>
    <atom:link href="http://www.mwellner.de/tags/xpc-com-api/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Using xPC COM API and Visual C#</title>
      <link>http://www.mwellner.de/2008/04/using-xpc-com-api-and-visual-c/</link>
      <pubDate>Sat, 05 Apr 2008 16:00:34 +0000</pubDate>
      
      <guid>http://www.mwellner.de/2008/04/using-xpc-com-api-and-visual-c/</guid>
      <description>&lt;p&gt;This entry is for those who want to control an xPC target computer with a program written in C#. I personally did not find any example how to do this, the documentation provides an example using Visual Basic, but I found a simpler way. I do only use the xPC COM API (which must be included as reference in the project) and not the model COM interface. I think this is easier because you don&amp;#8217;t have to reinsert the model reference if you recompile it.&lt;/p&gt;

&lt;p&gt;The example here is a very simple one. I just needed to connect to the target, load the application, and register one signal, which I need to access. Please note that you need to insert a gain element with value 1 to register a signal (Target.GetSignalIdx).&lt;/p&gt;

&lt;pre name=&#34;code&#34; class=&#34;c#&#34;&gt;using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using XPCAPICOMLib;

namespace ProjectNamespace
{
    class XPC_COM
    {
        private xPCProtocol Protocol;  // from XPCAPICOMLib
        private xPCTarget Target;      // from XPCAPICOMLib
        private int SignalID;   // signal ID for one signal

        public XPC_COM()  // constructor for XPC_COM object
        {
            // initialize protocol and target objects
            Protocol = new xPCProtocol();
            Target = new xPCTarget();
            // establish connection to target
            Protocol.Init();
            Protocol.TcpIpConnect(&#34;192.168.0.1&#34;, &#34;22222&#34;);
            // load application
            Target.Init(Protocol);
            Target.LoadApp(&#34;folder name&#34;, &#34;model name&#34;);
            // find signal id
            SignalID = Target.GetSignalIdx(&#34;signal name&#34;);
        }

        ~XPC_COM() // destructor for XPC_COM object
        {
            // close connection to xPC target
            Protocol.Close();
        }

        public int isAppRunning()
        {
            return Target.IsAppRunning();
        }

        public void startApp()
        {
            Target.StartApp();
        }

        public void stopApp()
        {
            Target.StopApp();
        }

        public double getLength()
        {
            return Target.GetSignal(SignalID);
        }

    }
}
&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>